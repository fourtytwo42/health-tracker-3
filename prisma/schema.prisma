// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         String   @default("USER")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relations
  profile      Profile?
  meals        Meal[]
  activities   Activity[]
  biomarkers   Biomarker[]
  goals        Goal[]
  leaderboard  LeaderboardEntry?
  mealPlans    MealPlan[]
  activityPlans ActivityPlan[]
  groceryLists GroceryList[]
  reports      Report[]
  llmUsage     LLMUsage[]
  
  @@map("users")
}

model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique @map("user_id")
  firstName         String?  @map("first_name")
  lastName          String?  @map("last_name")
  dateOfBirth       DateTime? @map("date_of_birth")
  gender            String?
  height            Float?   // in cm
  weight            Float?   // in kg
  targetWeight      Float?   @map("target_weight")
  activityLevel     String   @default("SEDENTARY") @map("activity_level")
  dietaryPreferences String? @map("dietary_preferences") // JSON string
  calorieTarget     Int?     @map("calorie_target")
  proteinTarget     Int?     @map("protein_target") // in grams
  carbTarget        Int?     @map("carb_target") // in grams
  fatTarget         Int?     @map("fat_target") // in grams
  fiberTarget       Int?     @map("fiber_target") // in grams
  privacySettings   String?  @map("privacy_settings") // JSON string
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
}

model Meal {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  name          String
  mealType      String   @map("meal_type")
  ingredients   String   // JSON string of ingredients with quantities
  nutritionInfo String?  @map("nutrition_info") // JSON string of calories, macros, etc.
  photoUrl      String?  @map("photo_url")
  notes         String?
  loggedAt      DateTime @default(now()) @map("logged_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("meals")
}

model Activity {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  type        String
  duration    Int      // in minutes
  calories    Int?     // calories burned
  intensity   String   @default("MODERATE")
  notes       String?
  loggedAt    DateTime @default(now()) @map("logged_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("activities")
}

model Biomarker {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String
  value     Float
  unit      String
  photoUrl  String?  @map("photo_url")
  notes     String?
  loggedAt  DateTime @default(now()) @map("logged_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("biomarkers")
}

model Goal {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  description String?
  type        String
  targetValue Float?   @map("target_value")
  currentValue Float?  @map("current_value")
  unit        String?
  deadline    DateTime?
  status      String   @default("ACTIVE")
  completedAt DateTime? @map("completed_at")
  certificateUrl String? @map("certificate_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("goals")
}

model LeaderboardEntry {
  userId      String @id @map("user_id")
  totalPoints Int    @default(0) @map("total_points")
  rank        Int?
  lastUpdated DateTime @default(now()) @map("last_updated")
  
  // Relations
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("leaderboard")
}

model MealPlan {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  description String?
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  planData    String   @map("plan_data") // JSON string of meal plan data
  totalCalories Int?   @map("total_calories")
  totalProtein Int?    @map("total_protein")
  totalCarbs   Int?    @map("total_carbs")
  totalFat     Int?    @map("total_fat")
  totalFiber   Int?    @map("total_fiber")
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("meal_plans")
}

model ActivityPlan {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  description String?
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  planData    String   @map("plan_data") // JSON string of activity plan data
  totalDuration Int?   @map("total_duration") // in minutes
  totalCalories Int?   @map("total_calories")
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("activity_plans")
}

model GroceryList {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  items       String   // JSON string of grocery items grouped by aisle
  totalItems  Int      @default(0) @map("total_items")
  isCompleted Boolean  @default(false) @map("is_completed")
  pdfUrl      String?  @map("pdf_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("grocery_lists")
}

model Report {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  type        String
  data        String   // JSON string of report data
  pdfUrl      String?  @map("pdf_url")
  docxUrl     String?  @map("docx_url")
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("reports")
}

model IngredientTaxonomy {
  id    String @id @default(cuid())
  name  String @unique
  aisle String
  category String?
  
  @@map("ingredient_taxonomy")
}

model Setting {
  id          String @id @default(cuid())
  key         String @unique
  value       String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("settings")
}

model LLMUsage {
  id              String   @id @default(cuid())
  providerKey     String   @map("provider_key")
  model           String
  promptTokens    Int      @map("prompt_tokens")
  completionTokens Int     @map("completion_tokens")
  totalTokens     Int      @map("total_tokens")
  inputCost       Float    @map("input_cost")
  outputCost      Float    @map("output_cost")
  totalCost       Float    @map("total_cost")
  userId          String?  @map("user_id")
  requestType     String?  @map("request_type") // e.g., "chat", "meal_plan", "test"
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  user            User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("llm_usage")
}

model LLMUsageSummary {
  id              String   @id @default(cuid())
  providerKey     String   @unique @map("provider_key")
  totalPromptTokens Int    @default(0) @map("total_prompt_tokens")
  totalCompletionTokens Int @default(0) @map("total_completion_tokens")
  totalTokens     Int      @default(0) @map("total_tokens")
  totalInputCost  Float    @default(0) @map("total_input_cost")
  totalOutputCost Float    @default(0) @map("total_output_cost")
  totalCost       Float    @default(0) @map("total_cost")
  requestCount    Int      @default(0) @map("request_count")
  lastResetAt     DateTime @default(now()) @map("last_reset_at")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("llm_usage_summary")
}